{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clamp = clamp;\nexports.scrolledOverPercent = scrolledOverPercent;\nexports.resizeToRatio = resizeToRatio;\nexports.resizeToContain = resizeToContain;\nexports.resizeToCover = resizeToCover;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/*\n * Clamp a value between two other values\n * @param {number} number\n * @param {number} min\n * @param {number} max\n * @return {number}\n */\n\n\nfunction clamp(number) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  return Math.min(Math.max(number, min), max);\n}\n/*\n * Get the percentage scrolled over an element\n * @param {HTMLElement} element\n * @return {number} value between 0 and 1\n */\n\n\nfunction scrolledOverPercent(element) {\n  var scrolled = window.pageYOffset;\n  var height = element.offsetHeight;\n  var top = element.offsetTop;\n  var percent = scrolled / (top + height);\n  return clamp(percent);\n}\n/*\n * Resize to original aspect ratio\n * @param {Object} dimensions The original dimensions\n * @param {number} dimensions.height\n * @param {number} dimensions.width\n * @param {string} prop Property name\n * @param {number} value Current property value\n * @param {Object} new height and width\n */\n\n\nfunction resizeToRatio(dimensions, prop, value) {\n  var _ref;\n\n  var otherProp = prop === 'width' ? 'height' : 'width';\n  var otherPropValue = Math.round(value * dimensions[otherProp] / dimensions[prop]);\n  return _ref = {}, _defineProperty(_ref, otherProp, otherPropValue), _defineProperty(_ref, prop, value), _ref;\n}\n/*\n * Simulate \"background-position: contain\"\n * @param {Object} dimensions The original dimensions\n * @param {number} dimensions.height\n * @param {number} dimensions.width\n * @param {Object} maxDimensions The available space\n * @param {number} maxDimensions.height\n * @param {number} maxDimensions.width\n * @return {Object} new height and width\n */\n\n\nfunction resizeToContain(dimensions, maxDimensions) {\n  return Object.keys(dimensions).reduce(function (prevDimensions, prop) {\n    return prevDimensions[prop] > maxDimensions[prop] ? resizeToRatio(prevDimensions, prop, maxDimensions[prop]) : prevDimensions;\n  }, dimensions);\n}\n/*\n * Simulate \"background-position: cover\"\n * @param {Object} dimensions The original dimensions\n * @param {number} dimensions.height\n * @param {number} dimensions.width\n * @param {Object} maxDimensions The available space\n * @param {number} maxDimensions.height\n * @param {number} maxDimensions.width\n * @return {Object} new height and width\n */\n\n\nfunction resizeToCover(dimensions, maxDimensions) {\n  var dimensionsAfterContain = resizeToContain(dimensions, maxDimensions);\n  return Object.keys(dimensions).reduce(function (prevDimensions, prop) {\n    return prevDimensions[prop] < maxDimensions[prop] ? resizeToRatio(prevDimensions, prop, maxDimensions[prop]) : prevDimensions;\n  }, dimensionsAfterContain);\n}","map":null,"metadata":{},"sourceType":"script"}